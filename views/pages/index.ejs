<!DOCTYPE html>
<html lang="en">
  <%- include('head'); -%>
  <body>
    <style>
      ::placeholder {
        font-size: 13px;
      }
    </style>
    <div class="container" style="width: 1250px">
      <div class="row">
        <div class="col-6">
          <h1 class="text-center my-5">Criando novo usecase</h1>
          <div class="mb-3">
            <label class="mb-1"> Nome do usecase </label>
            <input
              id="usecase"
              class="form-control"
              placeholder="Exemplo: UserRecoveryPassword"
            />
          </div>
          <div class="mb-3" id="select-repositories-container">
            <label class="mb-1">Lista de repositórios</label>
          </div>

          <div class="mb-3">
            <label class="mb-1">Selecionar em qual pasta salvar</label>
            <select
              class="form-control"
              placeholder="Nenhum valor selecionado"
              id="select-dir"
            ></select>
          </div>

          <div class="mb-3">
            <label class="mb-1">Bind das routes</label>
            <div class="d-flex justify-content-between">
              <div>
                <input type="radio" name="method-route" id="method-get" />
                <label for="method-get">GET</label>
              </div>
              <div>
                <input type="radio" name="method-route" id="method-post" />
                <label for="method-post">POST</label>
              </div>
              <div>
                <input type="radio" name="method-route" id="method-put" />
                <label for="method-put">PUT</label>
              </div>
              <div>
                <input type="radio" name="method-route" id="method-delete" />
                <label for="method-delete">DELETE</label>
              </div>
              <div>
                <input type="radio" name="method-route" id="method-patch" />
                <label for="method-patch">PATCH</label>
              </div>
            </div>
          </div>

          <div class="mb-3">
            <div class="row">
              <div class="col-6">
                <label class="mb-1">Path</label>
                <input class="form-control" id="path" />
              </div>
              <div class="col-6">
                <label class="mb-1"> Default middleware </label>
                <input
                  readonly
                  class="form-control"
                  placeholder="Nenhum middleware default"
                  id="default-middleware"
                />
              </div>
            </div>
          </div>
          <div class="mb-3"></div>

          <div class="mb-3" id="select-middleware-container">
            <label class="mb-1">Adicionar middlewares: </label>
          </div>

          <div class="mb-3">
            <button id="submit" class="btn btn-info btn-sm w-100">
              Criar usecase
            </button>
          </div>
        </div>

        <div class="col-6">
          <h1 class="text-center my-5">Criando novo repositorio</h1>
          <div class="mb-3">
            <label class="mb-1"> Nome do repositório </label>
            <input
              id="repository-name"
              class="form-control"
              placeholder="Exemplo: UserRepository"
            />
          </div>
          <div class="mb-3">
            <label class="mb-1"> Implementação </label>
            <input
              id="repository-implementation"
              class="form-control"
              placeholder="Exemplo: Prisma, Sdk"
            />
          </div>
          <div class="mb-3">
            <button id="submit-repo" class="btn btn-info btn-sm w-100">
              Criar repositório
            </button>
          </div>
        </div>
      </div>
    </div>

    <script>
      class DeveloperCli {
        constructor() {
          this.render = new Render();
          this.basePath = "/developer-cli/api";
          this.repositories = [];
          this.modules = [];
          this.middlewares = [];
          this.bind = [];
        }
        async handleSubmitRepo() {
          const payload = {
            name: $("#repository-name").val(),
            implementation: $("#repository-implementation").val()
          };
          const response = await axios.post(
            this.basePath + "/repository",
            payload
          );
          if (response.status < 300) {
            Swal.fire({
              position: "center",
              icon: "success",
              title: "Repositorio criado com sucesso",
              showConfirmButton: false,
              timer: 1500,
            });

            setTimeout(() => {
              window.location.reload();
            }, 1500);
          } else {
            alert("Falha");
          }
        }
        async handleSubmit() {
          const payload = {
            usecase: $("#usecase").val(),
            repositories: $("#select-repositories").val() || [],
            usecaseModule: $("#select-dir").val(),
            method: $("input[name=method-route]:checked")
              .prop("id")
              ?.replace("method-", ""),
            path: $("#path").val(),
            middleware: $("#select-middleware").val() || [],
          };

          const response = await axios.post(this.basePath + "/", payload);
          if (response.status < 300) {
            Swal.fire({
              position: "center",
              icon: "success",
              title: "Usecase criado com sucesso",
              showConfirmButton: false,
              timer: 1500,
            });

            setTimeout(() => {
              window.location.reload();
            }, 1500);
          } else {
            alert("Falha");
          }
        }
        async registerEvents() {
          $("#select-dir").change((e) => {
            const value = e.target.value;

            if (value) {
              for (const bind of this.bind) {
                const equals =
                  value.toLowerCase() === bind.basePath.replace("/", "");
                if (equals) {
                  $("#default-middleware").val(bind.baseMiddleware.join(", "));
                }
              }
            }
          });

          $("#submit").click(this.handleSubmit.bind(this));
          $("#submit-repo").click(this.handleSubmitRepo.bind(this));

          $("input[name=method-route]").change((e) => {
            const method = $(e.target).prop("id")?.replace("method-", "");
          });
        }
        async load() {
          const { data } = await axios.get(this.basePath + "/");
          await this.render.renderSelectRepositories(data.repositories);
          await this.render.renderDirectoryTree(data.modules);
          await this.render.renderSelectMiddleware(data.middlewares);

          Object.assign(this, data);

          await this.registerEvents();
        }
      }

      class Render {
        async renderSelectRepositories(repositories) {
          await $("#select-repositories-container").append(
            `
            <select
              class="selectpicker form-control"
              multiple
              data-live-search="true"
              id="select-repositories"
            >
              ${repositories
                .sort()
                .map(
                  (repository) =>
                    `<option value="${repository}">${repository.replace(
                      "Repository",
                      ""
                    )}</option>`
                )
                .join("")}
            </select>
            `
          );

          $("#select-repositories").selectpicker();
        }
        async renderSelectMiddleware(middlewares) {
          await $("#select-middleware-container").append(
            `
            <select
              class="selectpicker form-control"
              multiple
              data-live-search="true"
              id="select-middleware"
            >
              ${middlewares
                .sort()
                .map(
                  (middleware) =>
                    `<option value="${middleware}">${middleware}</option>`
                )
                .join("")}
            </select>
            `
          );
          $("#select-middleware").selectpicker();
        }

        async renderDirectoryTree(dirs) {
          await $("#select-dir").html("<option value=''></option>");
          await $("#select-dir").append(
            dirs.map((dir) => `<option value="${dir}">${dir}</option>`).join("")
          );
        }
      }

      const cli = new DeveloperCli();

      (async () => {
        await cli.load();
      })();
    </script>
  </body>
</html>
